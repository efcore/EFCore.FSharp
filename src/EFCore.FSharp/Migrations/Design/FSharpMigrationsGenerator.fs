namespace EntityFrameworkCore.FSharp.Migrations.Design

open System

open Microsoft.EntityFrameworkCore.Design
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Migrations.Design

open EntityFrameworkCore.FSharp
open EntityFrameworkCore.FSharp.EntityFrameworkExtensions

type FSharpMigrationsGeneratorDependencies
    (
        fSharpHelper: ICSharpHelper,
        fSharpMigrationOperationGenerator: ICSharpMigrationOperationGenerator,
        fSharpSnapshotGenerator: ICSharpSnapshotGenerator
    ) =

    member __.FSharpHelper = fSharpHelper
    member __.FSharpMigrationOperationGenerator = fSharpMigrationOperationGenerator
    member __.FSharpSnapshotGenerator = fSharpSnapshotGenerator

type FSharpMigrationsGenerator
    (dependencies, fSharpDependencies: FSharpMigrationsGeneratorDependencies) =
    inherit MigrationsCodeGenerator(dependencies)

    let code = fSharpDependencies.FSharpHelper

    let generator = fSharpDependencies.FSharpMigrationOperationGenerator

    let snapshot = fSharpDependencies.FSharpSnapshotGenerator

    // Due to api shape we're currently forced to work around the fact EF expects 2 files per migration
    let mutable tempUpOperations = list.Empty
    let mutable tempDownOperations = list.Empty
    let mutable tempMigrationName = String.Empty

    let getDefaultNamespaces (contextType: Type) =
        seq {
            "System"
            "Microsoft.EntityFrameworkCore"
            "Microsoft.EntityFrameworkCore.Infrastructure"
            "Microsoft.EntityFrameworkCore.Metadata"
            "Microsoft.EntityFrameworkCore.Migrations"
            "Microsoft.EntityFrameworkCore.Storage.ValueConversion"

            if
                contextType.Namespace
                |> String.IsNullOrEmpty
                |> not
            then
                contextType.Namespace
        }
        |> Seq.toList

    member private this.GenerateMigrationImpl
        (migrationNamespace)
        (migrationName)
        (migrationId: string)
        (contextType: Type)
        (upOperations)
        (downOperations)
        (model)
        =
        let allOperations =
            (upOperations
             |> Seq.append downOperations)

        let operationNamespaces =
            this.GetNamespaces allOperations
            |> Seq.toList

        let namespaces =
            (getDefaultNamespaces contextType
             @ operationNamespaces)
            |> sortNamespaces
            |> Seq.distinct

        // Up operations
        let upOperationsBuilder = IndentedStringBuilder()
        generator.Generate("migrationBuilder", upOperations, upOperationsBuilder)

        // Down operations
        let downOperationsBuilder = IndentedStringBuilder()
        generator.Generate("migrationBuilder", downOperations, downOperationsBuilder)

        // Snapshot
        let snapshotBuilder = IndentedStringBuilder()
        snapshot.Generate("modelBuilder", model, snapshotBuilder)


        stringBuffer {
            "// <auto-generated />"
            $"namespace {(code.Namespace [| migrationNamespace |])}"
            ""
            writeNamespaces namespaces
            ""
            $"[<DbContext(typeof<%s{code.Reference contextType}>)>]"
            $"[<Migration(%s{code.Literal migrationId})>]"
            $"type %s{code.Identifier migrationName}() ="

            indent {
                "inherit Migration()"
                ""
                "override this.Up(migrationBuilder:MigrationBuilder) ="

                indent {
                    string upOperationsBuilder
                    ""
                }

                "override this.Down(migrationBuilder:MigrationBuilder) ="

                indent {
                    string downOperationsBuilder
                    ""
                }

                "override this.BuildTargetModel(modelBuilder: ModelBuilder) ="

                indent {
                    string snapshotBuilder
                    ""
                }
            }
        }

    member private this.GenerateSnapshotImpl
        (modelSnapshotNamespace: string)
        (contextType: Type)
        (modelSnapshotName: string)
        (model: IModel)
        =

        let modelNamespaces =
            this.GetNamespaces model
            |> Seq.toList

        let namespaces =
            (getDefaultNamespaces contextType
             @ modelNamespaces)
            |> sortNamespaces
            |> Seq.distinct

        let snapshotBuilder = IndentedStringBuilder()
        snapshot.Generate("modelBuilder", model, snapshotBuilder)

        stringBuffer {
            "// <auto-generated />"
            $"namespace {(code.Namespace [| modelSnapshotNamespace |])}"
            ""
            writeNamespaces namespaces
            ""
            $"[<DbContext(typeof<%s{code.Reference contextType}>)>]"
            $"type %s{code.Identifier modelSnapshotName}() ="

            indent {
                "inherit ModelSnapshot()"
                ""
                "override this.BuildModel(modelBuilder: ModelBuilder) ="

                indent {
                    string snapshotBuilder
                    ""
                }
            }
        }

    override __.Language = "F#"
    override __.FileExtension = ".fs"

    // Defined in the order of when it's called during migration add
    override this.GenerateMigration
        (
            migrationNamespace,
            migrationName,
            upOperations,
            downOperations
        ) =
        tempUpOperations <- Seq.toList upOperations
        tempDownOperations <- Seq.toList downOperations
        tempMigrationName <- migrationName
        "// intentionally empty"

    override this.GenerateMetadata
        (
            migrationNamespace,
            contextType,
            migrationName,
            migrationId,
            targetModel
        ) =
        if tempMigrationName = migrationName then
            this.GenerateMigrationImpl
                migrationNamespace
                migrationName
                migrationId
                contextType
                tempUpOperations
                tempDownOperations
                targetModel
        else
            invalidOp
                "Migration isn't the same as previously saved during GenerateMigration, DEV: did the order of operations change?"

    override this.GenerateSnapshot(modelSnapshotNamespace, contextType, modelSnapshotName, model) =
        this.GenerateSnapshotImpl modelSnapshotNamespace contextType modelSnapshotName model
